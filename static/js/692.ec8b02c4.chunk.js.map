{"version":3,"file":"static/js/692.ec8b02c4.chunk.js","mappings":"mTAGaA,EAAOC,EAAAA,GAAAA,GAAH,0CAIJC,EAAOD,EAAAA,GAAAA,GAAH,yNAGN,SAAAE,GAAC,OAAIA,EAAEC,MAAMC,OAAOC,IAAnB,IACG,SAAAH,GAAC,OAAIA,EAAEC,MAAMG,UAAUC,CAAtB,IACC,SAAAL,GAAC,OAAIA,EAAEC,MAAMK,YAAYC,MAAxB,IAEN,SAAAP,GAAC,OAAIA,EAAEC,MAAMO,QAAQD,MAApB,IAA8B,SAAAP,GAAC,OAAIA,EAAEC,MAAMC,OAAOO,MAAnB,IACzB,SAAAT,GAAC,OAAIA,EAAEC,MAAMS,MAAMC,KAAlB,IAOPC,EAAQd,EAAAA,GAAAA,GAAH,yGAGP,SAAAE,GAAC,OAAIA,EAAEC,MAAMC,OAAOC,IAAnB,IACG,SAAAH,GAAC,OAAIA,EAAEC,MAAMG,UAAUC,CAAtB,IACC,SAAAL,GAAC,OAAIA,EAAEC,MAAMK,YAAYO,IAAxB,IAGLC,GAAOhB,EAAAA,EAAAA,IAAOiB,EAAAA,IAAPjB,CAAH,+C,mBCzBJkB,EAAS,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QAEvB,OADAC,EAAAA,GAAAA,WAAgC,MAE9B,8BACsB,IAAnBD,EAAQE,QACP,SAACC,EAAA,EAAD,KAEA,SAACvB,EAAD,UACGoB,EAAQI,KAAI,gBAAGC,EAAH,EAAGA,OAAQC,EAAX,EAAWA,QAAX,OACX,UAACxB,EAAD,YACE,UAACa,EAAD,YACE,SAACE,EAAD,IADF,UAEUQ,KAETC,IALQD,EADA,OAatB,ECtBc,SAASE,IACtB,IAEMP,ECHuB,SAAAQ,GAC7B,OAA8BC,EAAAA,EAAAA,UAAS,IAAvC,eAAOT,EAAP,KAAgBU,EAAhB,KAeA,OAbAC,EAAAA,EAAAA,YAAU,WAAM,wCACd,8GAE0BC,EAAAA,EAAAA,IAAiBJ,GAF3C,OAEUR,EAFV,OAGIU,EAAWV,GAHf,gDAKIa,QAAQC,IAAI,KAAMC,UAClBC,EAAAA,EAAAA,MANJ,0DADc,uBAAC,WAAD,wBAUdC,EACD,GAAE,CAACT,IAEGR,CACR,CDdiBkB,EAFCC,EAAAA,EAAAA,MAATC,KACaC,MAAM,cAAc,IAGzC,OAAO,8BAAGrB,IAAW,SAACD,EAAD,CAAQC,QAASA,KACvC,C","sources":["components/Review/Review.styled.js","components/Review/Review.jsx","pages/Reviews.jsx","hooks/useFetchReviews.js"],"sourcesContent":["import styled from 'styled-components';\nimport { BsFillPersonFill } from 'react-icons/bs';\n\nexport const List = styled.ul`\n  padding: 10px;\n`;\n\nexport const Item = styled.li`\n  padding: 30px;\n\n  color: ${p => p.theme.colors.text};\n  font-size: ${p => p.theme.fontSizes.s};\n  font-weight: ${p => p.theme.fontWeights.normal};\n\n  border: ${p => p.theme.borders.normal} ${p => p.theme.colors.accent};\n  border-radius: ${p => p.theme.radii.large};\n  padding: 20px;\n  &:not(:last-child) {\n    margin-bottom: 10px;\n  }\n`;\n\nexport const Autor = styled.h4`\n  margin-bottom: 10px;\n\n  color: ${p => p.theme.colors.text};\n  font-size: ${p => p.theme.fontSizes.s};\n  font-weight: ${p => p.theme.fontWeights.bold};\n`;\n\nexport const Icon = styled(BsFillPersonFill)`\n  margin-right: 10px;\n`;\n","import PropTypes from 'prop-types';\nimport * as Scroll from 'react-scroll';\nimport { List, Item, Autor, Icon } from './Review.styled';\nimport { NotFound } from 'components/NotFound/NotFound';\n\nexport const Review = ({ reviews }) => {\n  Scroll.animateScroll.scrollMore(500);\n  return (\n    <>\n      {reviews.length === 0 ? (\n        <NotFound />\n      ) : (\n        <List>\n          {reviews.map(({ author, content }) => (\n            <Item key={author}>\n              <Autor>\n                <Icon />\n                Autor: {author}\n              </Autor>\n              {content}\n            </Item>\n          ))}\n        </List>\n      )}\n    </>\n  );\n};\n\nReview.propTypes = {\n  reviews: PropTypes.array.isRequired,\n};\n","import { useParams } from 'react-router-dom';\nimport { useFetchReviews } from 'hooks/useFetchReviews';\nimport { Review } from 'components/Review/Review';\n\nexport default function Reviews() {\n  const { slug } = useParams();\n  const movieId = slug.match(/[a-z0-9]+$/)[0];\n  const reviews = useFetchReviews(movieId);\n\n  return <>{reviews && <Review reviews={reviews} />}</>;\n}\n","import { useState, useEffect } from 'react';\nimport { fetchReviewsById } from 'servises/themoviedb-api';\nimport { NotificationError } from 'components/Notification/Notification';\n\nexport const useFetchReviews = id => {\n  const [reviews, setReviews] = useState([]);\n\n  useEffect(() => {\n    async function fetch() {\n      try {\n        const reviews = await fetchReviewsById(id);\n        setReviews(reviews);\n      } catch (error) {\n        console.log(error.message);\n        NotificationError();\n      }\n    }\n    fetch();\n  }, [id]);\n\n  return reviews;\n};\n"],"names":["List","styled","Item","p","theme","colors","text","fontSizes","s","fontWeights","normal","borders","accent","radii","large","Autor","bold","Icon","BsFillPersonFill","Review","reviews","Scroll","length","NotFound","map","author","content","Reviews","id","useState","setReviews","useEffect","fetchReviewsById","console","log","message","NotificationError","fetch","useFetchReviews","useParams","slug","match"],"sourceRoot":""}