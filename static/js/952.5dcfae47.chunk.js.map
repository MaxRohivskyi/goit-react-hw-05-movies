{"version":3,"file":"static/js/952.5dcfae47.chunk.js","mappings":"mTAEaA,EAAOC,EAAAA,GAAAA,GAAH,0JAOJC,EAAOD,EAAAA,GAAAA,GAAH,+EACN,SAAAE,GAAC,OAAIA,EAAEC,MAAMC,OAAOC,IAAnB,IACG,SAAAH,GAAC,OAAIA,EAAEC,MAAMG,UAAUC,EAAtB,IACC,SAAAL,GAAC,OAAIA,EAAEC,MAAMK,YAAYC,MAAxB,IAGLC,EAAQV,EAAAA,GAAAA,IAAH,iGAEU,SAAAE,GAAC,OAAIA,EAAEC,MAAMC,OAAOO,MAAnB,IACV,SAAAT,GAAC,OAAIA,EAAEC,MAAMS,MAAMH,MAAlB,IAGPI,EAAOb,EAAAA,GAAAA,EAAH,+EACN,SAAAE,GAAC,OAAIA,EAAEC,MAAMC,OAAOO,MAAnB,IACG,SAAAT,GAAC,OAAIA,EAAEC,MAAMG,UAAUQ,CAAtB,IACC,SAAAZ,GAAC,OAAIA,EAAEC,MAAMK,YAAYO,IAAxB,I,mBChBLC,EAAS,SAAC,GAAc,IAAZC,EAAW,EAAXA,KAGvB,OAFAC,EAAAA,GAAAA,WAAgC,MAG9B,8BACwB,IAArBD,EAAKA,KAAKE,QACT,SAACC,EAAA,EAAD,KAEA,SAACrB,EAAD,UACGkB,EAAKA,KAAKI,KAAI,gBAAGC,EAAH,EAAGA,KAAMC,EAAT,EAASA,UAAWC,EAApB,EAAoBA,aAApB,OACb,UAACvB,EAAD,WACGuB,GACC,SAACd,EAAD,CAAOe,IAAG,UAdL,mCAcK,OAAoBD,GAAgBE,IAAKJ,KAEnD,SAACZ,EAAD,CAAOe,IAAG,UAAKE,GAASD,IAAI,yBAE9B,SAACb,EAAD,UAAOS,KACP,uBAAIC,MAPKD,EADE,OAexB,EC5Bc,SAASM,IACtB,IAEMX,ECHoB,SAAAY,GAC1B,OAAwBC,EAAAA,EAAAA,UAAS,MAAjC,eAAOb,EAAP,KAAac,EAAb,KAeA,OAbAC,EAAAA,EAAAA,YAAU,WAAM,wCACd,8GAEuBC,EAAAA,EAAAA,IAAeJ,GAFtC,OAEUZ,EAFV,OAGIc,EAAQd,GAHZ,gDAKIiB,QAAQC,IAAI,KAAMC,UAClBC,EAAAA,EAAAA,MANJ,0DADc,uBAAC,WAAD,wBAUdC,EACD,GAAE,CAACT,IAEGZ,CACR,CDdcsB,EAFIC,EAAAA,EAAAA,MAATC,KACaC,MAAM,cAAc,IAGzC,OAAO,8BAAGzB,IAAQ,SAACD,EAAD,CAAQC,KAAMA,KACjC,C","sources":["components/CastId/CastId.styled.js","components/CastId/CastId.jsx","pages/Cast.jsx","hooks/useFetchCast.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const List = styled.ul`\n  display: grid;\n  grid-template-columns: repeat(6, 1fr);\n  grid-column-gap: 10px;\n  grid-row-gap: 1em;\n  padding-top: 20px;\n`;\nexport const Item = styled.li`\n  color: ${p => p.theme.colors.text};\n  font-size: ${p => p.theme.fontSizes.xs};\n  font-weight: ${p => p.theme.fontWeights.normal};\n`;\n\nexport const Image = styled.img`\n  height: 250px;\n  box-shadow: 1px 1px 3px ${p => p.theme.colors.accent};\n  border-radius: ${p => p.theme.radii.normal};\n`;\n\nexport const Name = styled.p`\n  color: ${p => p.theme.colors.accent};\n  font-size: ${p => p.theme.fontSizes.s};\n  font-weight: ${p => p.theme.fontWeights.bold};\n`;\n","import { NotFound } from 'components/NotFound/NotFound';\nimport * as Scroll from 'react-scroll';\nimport PropTypes from 'prop-types';\nimport { List, Item, Name, Image } from './CastId.styled';\nimport image from '../../img/no-poster-available.jpg';\n\nconst IMG_BASE_URL = 'https://image.tmdb.org/t/p/w300';\n\nexport const CastId = ({ cast }) => {\n  Scroll.animateScroll.scrollMore(500);\n\n  return (\n    <>\n      {cast.cast.length === 0 ? (\n        <NotFound />\n      ) : (\n        <List>\n          {cast.cast.map(({ name, character, profile_path }) => (\n            <Item key={name}>\n              {profile_path ? (\n                <Image src={`${IMG_BASE_URL}${profile_path}`} alt={name} />\n              ) : (\n                <Image src={`${image}`} alt=\"no-poster-available\" />\n              )}\n              <Name>{name}</Name>\n              <p>{character}</p>\n            </Item>\n          ))}\n        </List>\n      )}\n    </>\n  );\n};\n\nCastId.propTypes = {\n  cast: PropTypes.shape({\n    cast: PropTypes.array.isRequired,\n  }),\n};\n","import { useParams } from 'react-router-dom';\nimport { useFetchCast } from 'hooks/useFetchCast';\nimport { CastId } from 'components/CastId/CastId';\n\nexport default function Cast() {\n  const { slug } = useParams();\n  const movieId = slug.match(/[a-z0-9]+$/)[0];\n  const cast = useFetchCast(movieId);\n\n  return <>{cast && <CastId cast={cast} />}</>;\n}\n","import { useState, useEffect } from 'react';\nimport { fetchCastsById } from 'servises/themoviedb-api';\nimport { NotificationError } from 'components/Notification/Notification';\n\nexport const useFetchCast = id => {\n  const [cast, setCast] = useState(null);\n  \n  useEffect(() => {\n    async function fetch() {\n      try {\n        const cast = await fetchCastsById(id);\n        setCast(cast);\n      } catch (error) {\n        console.log(error.message);\n        NotificationError();\n      }\n    }\n    fetch();\n  }, [id]);\n\n  return cast;\n};\n"],"names":["List","styled","Item","p","theme","colors","text","fontSizes","xs","fontWeights","normal","Image","accent","radii","Name","s","bold","CastId","cast","Scroll","length","NotFound","map","name","character","profile_path","src","alt","image","Cast","id","useState","setCast","useEffect","fetchCastsById","console","log","message","NotificationError","fetch","useFetchCast","useParams","slug","match"],"sourceRoot":""}